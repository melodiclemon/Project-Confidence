<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
dialogMap = ds_map_create(); // Map holding ALL dialogs
dialogList = ds_list_create(); // List holding all current dialogs
playerInputDialog = false; // False if no current dialog accepts player input, true otherwise.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Dialogue

// Expand the array with as many dialog files you want. Many dialog txt files are encouraged
// to help better organize dialogs.
// The dialog files must be in the "Included Files" folder.
file[0] = "dialogEngine/testDialogs.txt";

for(var i = 0; i &lt; array_length_1d(file); i++)
{
    // Get dialog from the text file
    var dialogTextFile = file_text_open_read(file[i]);
    
    while(!file_text_eof(dialogTextFile))
    {
        var textLine = file_text_readln(dialogTextFile);
        
        // map the unique dialogID as the key, and the rest as value
        ds_map_add(dialogMap, 
                    string_extract(textLine, ":::", 0), 
                    string_extract(textLine, ":::", 1));
    
    }
    file_text_close(dialogTextFile);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy ds_lists

ds_list_destroy(dialogMap);
ds_list_destroy(dialogList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check each dialog in the array

for(dialogIndex = 0; dialogIndex &lt; ds_list_size(dialogList); dialogIndex++)
{
    if(instance_exists(dialogList[| dialogIndex]))
    {
        with(dialogList[| dialogIndex])
        {
            if(id.object_index == obj_dialogbubble)
            {
                if(other.playerInputDialog == false) 
                {
                    if(skipable || closeable || expectPlayerInput)
                    {
                        other.playerInputDialog = true;
                    }
                }
                if(finish)
                {
                    if(skipable || closeable || expectPlayerInput)
                    {
                        other.playerInputDialog = false;
                    }
                
                    var dialogScript = asset_get_index(dialogID);
                    
                    if(dialogScript != -1) 
                    {
                        script_execute(dialogScript, actor, input);
                    }
                    
                    instance_destroy();
                    ds_list_delete(other.dialogList, other.dialogIndex);
                }
            } 
            else
            {
                ds_list_delete(other.dialogList, other.dialogIndex);
            }
        }
    }
    else
    {
        ds_list_delete(other.dialogList, other.dialogIndex);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
