<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_deck</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
draw = 3;
cardTriggerDraw = 0;
freeIndexNum = 1;
canRedraw = true;
turnCompleted = false;
var i = 2;
repeat(3)
{
    cardArray[i] = -1;
    i -= 1;
}

cardObjects[0] = Card_Normal;
cardObjects[1] = Card_Negative;
cardObjects[2] = Card_Power;
cardObjects[3] = Card_Reverse;
cardObjects[4] = Card_Multi;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>combatManager_removeEntityFromDictionary(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Card creation alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cards

var cardObject = 0;

if(obj_combatManager.currentTurn == turn.draw)
{
    if(cardTriggerDraw &gt; 0 &amp;&amp; alarm[0] == -1)
    {
        for(var j = 0; j &lt; array_length_1d(PlayerManager.cardChanceArray); j++)
        {
            if(random(1) &lt;= PlayerManager.cardChanceArray[j])
            {
                cardObject = j+1;
                break;
            }
            else
                cardObject = 0;
                
        }
        
        var card = instance_create(x,y,cardObjects[cardObject]);
        card.cardValue = card_setValue();
        
        //set the index and put the card id in the array
        for(var i = 0; i &lt; array_length_1d(cardArray); i++)
        {
            if(cardArray[i] == -1)
            {
                cardArray[i] = card.id;
                card.index = i+1;
                card.type = cardObject;
                break;
            }
        }
        card.state = card_moveToBaseState;
        
        alarm[0] = room_speed;
        cardTriggerDraw--;
    }
}

if(obj_combatManager.currentTurn == turn.upkeep)
{
    if(draw &gt; 0 &amp;&amp; alarm[0] == -1)
    {
    for(var j = 0; j &lt; array_length_1d(PlayerManager.cardChanceArray); j++)
    {
        if(random(1) &lt;= PlayerManager.cardChanceArray[j])
        {
            cardObject = j+1;
            break;
        }
        else
            cardObject = 0;
            
    }


    var card = instance_create(x,y,cardObjects[cardObject]);
    card.cardValue = card_setValue();
    
    //set the index and put the card id in the array
    for(var i = 0; i &lt; array_length_1d(cardArray); i++)
    {
        if(cardArray[i] == -1)
        {
            cardArray[i] = card.id;
            card.index = i+1;
            break;
        }
    }
    card.state = card_moveToBaseState;
    
    alarm[0] = room_speed;
    draw--;
    }
}


if((cardTriggerDraw == 0 &amp;&amp; obj_combatManager.currentTurn == turn.draw))
{
      obj_combatManager.currentTurn = turn.friend;
}

// make sure to let the CombatManager know that we are done with our turn
if(draw == 0)
    combatManager_turnCompleted(turn.upkeep);
    
combatManager_turnCompleted(turn.action,turn.foe,turn.friend);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
