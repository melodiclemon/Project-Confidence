<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

// MAKE SURE scr_LoadDialogFromFile has been run before this script runs!
// Note that dialogbubbles displayes /c endsyntax the same as /s.

// variables that can be altered before showing dialog
dialogID = "";
textSpeed = 3; // value should be between 0.1(instant) - 6(slow)
font = fnt_coolskeleton; // font to use. REPLACE WITH DEFAULT FONT
color = c_white; // text color
bubbleColor = c_black; // bubbleColor
textSound = -1; // sound to play for each character in the dialog.
                // Won't be used if typewriter is set to false
write = false; // set to true when all variables have been set
typewriter = 1; // 0 == no typewriter, 1 == char by char. 2 == word by word
actor = -1; // id of the actorObject saying the dialog. Not necessary
characterDistance = 10; // distance from the character the dialogbubble 
                        // should be drawn
type = 0; // 0 == normal, 1 == shouting, 2 == thinking
closeable = true; // set to false if the player shouldn't be able to close the
                  // bubble manually
fontScale = 1; // fontscale, X &amp; Y needs to have the same scale
skipable = true; // can the player skip text in this bubble?

// variables that updates themself
dialog = ""; // current dialog to be written
nextDialogID = ""; // dialogID for the next dialog to be written
dialogLength = 0; // length of current dialog
charactersToDrawCurrentDialog = ""; // string of characters that should be drawn from the current dialog
charactersToDraw = ""; // string of characters that should be drawn
charactersDrawn = 0; // number of characters in the current dialog that should be drawn
previousCharactersDrawn = ""; // characters from previous dialogs that still needs to be drawn
startOfDialog = true; // is thie the start of the dialog row?
newDialog = false; // is there more dialog after this?
endOfDialog = false; // is it the end of the dialog tree?
fontSize = font_get_size(font); // the size of the font used
dialogWidth = 0; // the total width of the dialog
dialogHeight = 0; // the total height of the dialog
bubbleWidth = 0; // the total width of the dialogbubble
bubbleHeight = 0; // the total height of the dialogbubble
bubbleMaxLength = 450; // the maximum width of the dialogbubble
closeDelay = 0; // step delay before the dialogbubble closes
splitDialog = 0; // splitString used by word typewriter
splitDialogsToDraw = 0; // number of split_string dialogs to draw
loadComplete = false; // if all values above have been set at least once
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase splitDialogsToDraw
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy instance
if (typewriter == 2) 
{
    ds_list_destroy(splitDialog);
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_dialogbubble</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Format dialog string
if (startOfDialog == true &amp;&amp; write == true) 
{
    //reset newDialog
    newDialog = false;
    
    dialog = global.dialog[? dialogID];
    
    nextDialogID = string_rtrim(string_extract(dialog, "&gt;&gt;&gt;", 1));
    dialog = string_rtrim(string_extract(dialog, "&gt;&gt;&gt;", 0));
    
    // format string after need    
    if (string_pos("/s", dialog) != 0 || string_pos("/c", dialog) != 0)
    {
        newDialog = true;
        endOfDialog = true;
        dialog = string_replace(dialog, "/s", "");
        dialog = string_replace(dialog, "/c", "");
    }
    
    if (string_pos("/e", dialog) != 0)
    {
        endOfDialog = true;
        dialog = string_replace(dialog, "/e", "");
    }
    
    if (string_pos("/a", dialog) != 0)
    {
        endOfDialog = true;
        if (string_pos("/as", dialog) != 0)
        {
            closeDelay = room_speed;
            dialog = string_replace(dialog, "/as", "");    
        }
        else if (string_pos("/af", dialog) != 0)
        {
            closeDelay = room_speed * 2;
            dialog = string_replace(dialog, "/af", "");
        }
        else
        {
            closeDelay = 1;
            dialog = string_replace(dialog, "/a", "");
        }
    }
    
    if (typewriter == 2) 
    {
        splitDialog = string_split(dialog, " ");
    }
    
    // calculate dialog specific values
    fontSize = font_get_size(font) * fontScale;
    draw_set_font(font);
    dialogLength = string_length(dialog);
    dialogWidth = string_width_ext
    (
        dialog,
        fontSize * (fontSize / 2),
        bubbleMaxLength
    ) * fontScale;
    dialogHeight = string_height_ext
    (
        dialog,
        fontSize * (fontSize / 2),
        bubbleMaxLength
    ) * fontScale;
    bubbleWidth = dialogWidth + fontSize * 2;
    bubbleHeight = dialogHeight + fontSize;
    
    startOfDialog = false;
    loadComplete = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decide characters to draw
if (write == true) 
{
    if (typewriter == 0 || typewriter == 1) 
    {
        // if typewriter is false, we want to display the whole message right away
        if (typewriter == 0)
        {
            charactersToDrawCurrentDialog = dialog;
            charactersToDraw = previousCharactersDrawn + dialog;
            charactersDrawn = dialogLength + 1;
        }
        
        // if there's still characters left to draw
        if (floor(charactersDrawn) &lt;= dialogLength) 
        {
            // copy all characters that should be drawn this step
            charactersToDrawCurrentDialog = string_copy(dialog, 
                                                        0, 
                                                        charactersDrawn);
        
            // if there is a text sound and if a new character will be written                                       
            if(textSound != -1 &amp;&amp;
                typewriter == 1 &amp;&amp;
                charactersDrawn &lt; floor(charactersDrawn + (1 / textSpeed)))
            {
                audio_play_sound(textSound, 10, false);
            }
                                                        
            charactersDrawn += 1 / textSpeed;
            charactersToDraw = previousCharactersDrawn + charactersToDrawCurrentDialog;
        }
        else
        {
            // if we are at the end of the dialog
            if (newDialog)
            {
                // update variables necessary for reading a new dialog
                dialogID = nextDialogID;
                previousCharactersDrawn += charactersToDrawCurrentDialog;
                
                // reset variables necessary for reading a new dialog
                charactersToDrawCurrentDialog = "";
                startOfDialog = true;
                charactersDrawn = 0;
            }
            if (endOfDialog)
            {
                write = false;
            }
        }
    }
    else
    {
        // typewriter == 2
        // if there's still words to draw
        if (splitDialogsToDraw &lt;= ds_list_size(splitDialog))
        {
            // copy all words that should be printed
            charactersToDrawCurrentDialog = "";
            for (var word = 0; word &lt; splitDialogsToDraw; word++)
            {
                charactersToDrawCurrentDialog += splitDialog[| word];
                if (word != ds_list_size(splitDialog)) 
                {
                    charactersToDrawCurrentDialog += " ";
                }
            }
            
            if(alarm[1] == -1 &amp;&amp; splitDialogsToDraw &lt;= ds_list_size(splitDialog)) 
            {
                alarm[1] = room_speed / textSpeed;
                splitDialogsToDraw++;
                if(textSound != -1 &amp;&amp; splitDialogsToDraw &lt;= ds_list_size(splitDialog))
                {
                    audio_play_sound(textSound, 10, false);
                }
            }
            charactersToDraw = previousCharactersDrawn + charactersToDrawCurrentDialog;
        }
        else
        {
            // if we are at the end of the dialog
            if (newDialog)
            {
                // update variables necessary for reading a new dialog
                dialogID = nextDialogID;
                previousCharactersDrawn += charactersToDrawCurrentDialog;
                
                // reset variables necessary for reading a new dialog
                charactersToDrawCurrentDialog = "";
                startOfDialog = true;
                charactersDrawn = 0;
                splitDialog = 0;
                ds_list_clear(splitDialog);
            }
            if (endOfDialog)
            {
                write = false;
            }
        }
    }
    
    // if the bubble should close automagically
    if (endOfDialog &amp;&amp; !write &amp;&amp; closeDelay != 0)
    {
        if (alarm[0] == -1) 
        {
            alarm[0] = closeDelay;
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw dialogbubble type 0

if (loadComplete &amp;&amp; type == 0)
{ 
    draw_set_color(bubbleColor);
    if(actor != -1) 
    {
        var distance = actor.sprite_yoffset + characterDistance;
        var xCord = actor.x - view_xview[0];
        var yCord = actor.y - view_yview[0];
        
        var yViewOffset = 0;
        if (yCord - bubbleHeight - distance &lt; view_yview[view_current])
        {
            yViewOffset = (distance);
        } 
        
        draw_roundrect_ext
        (
            xCord - bubbleWidth / 2, 
            yCord - bubbleHeight - distance + yViewOffset, 
            xCord + bubbleWidth / 2, 
            yCord - distance + yViewOffset, 
            fontSize, 
            fontSize, 
            false
        );
        
        // outline
        draw_set_color(color);
        draw_roundrect_ext
        (
            xCord - bubbleWidth / 2, 
            yCord - bubbleHeight - distance + yViewOffset, 
            xCord + bubbleWidth / 2, 
            yCord - distance + yViewOffset, 
            fontSize, 
            fontSize, 
            true
        );
    }
    else
    {
        var xCord = x - view_xview[0];
        var yCord = y - view_yview[0];
    
        draw_roundrect_ext
        (
            xCord, 
            yCord, 
            xCord + bubbleWidth, 
            yCord + bubbleHeight, 
            fontSize, 
            fontSize, 
            false
        );
        
        // outline
        draw_set_color(color);
        draw_roundrect_ext
        (
            xCord, 
            yCord, 
            xCord + bubbleWidth, 
            yCord + bubbleHeight, 
            fontSize, 
            fontSize, 
            true
        );
        
    }
    
    //triangle
    if(actor != -1) 
    {
        // We add "+1" here to make sure it's just outside the actual bubble
        var triangleYOffset = 0;
        var actorSpriteYOffset = actor.sprite_yoffset;
        var outlineOffset = 1;
        if (yViewOffset != 0)
        {
            triangleYOffset = yViewOffset - bubbleHeight + 2;
            actorSpriteYOffset = floor((actorSpriteYOffset / 2));
            outlineOffset = -1;
        }
        //outline
        draw_set_color(color);
        draw_triangle
        (
            xCord - fontSize, 
            yCord - distance + outlineOffset + triangleYOffset, 
            xCord + fontSize,
            yCord - distance + outlineOffset + triangleYOffset,
            xCord,
            yCord - actorSpriteYOffset,
            true
        );
        
        draw_set_color(bubbleColor);
        draw_triangle
        (
            xCord - fontSize, 
            yCord - distance + triangleYOffset, 
            xCord + fontSize,
            yCord - distance + triangleYOffset,
            xCord,
            yCord - actorSpriteYOffset,
            false
        );
    }
    
    //text
    draw_set_font(font);
    draw_set_color(color);
    if(actor != -1) 
    {
        draw_text_ext_transformed
        (
            xCord + fontSize - (bubbleWidth / 2),
            yCord + (fontSize / 1.5) - bubbleHeight - distance + yViewOffset, 
            charactersToDraw, 
            fontSize * (fontSize / 2),
            bubbleMaxLength,
            fontScale,
            fontScale,
            0
        );
    }
    else
    {
        draw_text_ext_transformed
        (
            xCord + fontSize,
            yCord + (fontSize / 1.5), 
            charactersToDraw, 
            fontSize * (fontSize / 2),
            bubbleMaxLength,
            fontScale,
            fontScale,
            0,
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw dialogbubble type 1

if (loadComplete &amp;&amp; type == 1)
{   
    draw_set_color(bubbleColor);
    if (actor != -1) 
    {
        var distance = actor.sprite_yoffset + characterDistance;
        var xCord = actor.x - view_xview[0];
        var yCord = actor.y - view_yview[0];
        
        draw_rectangle
        (
            xCord - bubbleWidth / 2, 
            yCord - bubbleHeight - distance, 
            xCord + bubbleWidth / 2, 
            yCord - distance,
            false
        );
    }
    else
    {
        var xCord = x - view_xview[0];
        var yCord = y - view_yview[0];
        
        draw_rectangle
        (
            xCord, 
            yCord, 
            xCord + bubbleWidth, 
            yCord + bubbleHeight,
            false
        );
    }
    
    //type 1 cosmetic loop
    
    if (actor != -1)
    {
        // Top left corner
        draw_triangle
        (
            xCord - bubbleWidth / 2,
            yCord - bubbleHeight - distance + fontSize,
            xCord - bubbleWidth / 2,
            yCord - bubbleHeight - distance,
            xCord - bubbleWidth / 2 - ((fontSize + (fontSize / 2)) / 2),
            yCord - bubbleHeight - distance - ((fontSize + (fontSize / 2)) / 2),
            false
        );
        draw_triangle
        (
            xCord - bubbleWidth / 2 + fontSize,
            yCord - bubbleHeight - distance,
            xCord - bubbleWidth / 2,
            yCord - bubbleHeight - distance,
            xCord - bubbleWidth / 2 - ((fontSize + (fontSize / 2)) / 2),
            yCord - bubbleHeight - distance - ((fontSize + (fontSize / 2)) / 2),
            false
        );
        
        // Top right corner
        draw_triangle
        (
            xCord + bubbleWidth / 2,
            yCord - bubbleHeight - distance + fontSize,
            xCord + bubbleWidth / 2,
            yCord - bubbleHeight - distance,
            xCord + bubbleWidth / 2 + ((fontSize + (fontSize / 2)) / 2),
            yCord - bubbleHeight - distance - ((fontSize + (fontSize / 2)) / 2),
            false
        );
        draw_triangle
        (
            xCord + bubbleWidth / 2 - fontSize,
            yCord - bubbleHeight - distance,
            xCord + bubbleWidth / 2,
            yCord - bubbleHeight - distance,
            xCord + bubbleWidth / 2 + ((fontSize + (fontSize / 2)) / 2),
            yCord - bubbleHeight - distance - ((fontSize + (fontSize / 2)) / 2),
            false
        );
        
        // Bottom right corner
        draw_triangle
        (
            xCord + bubbleWidth / 2,
            yCord - distance - fontSize,
            xCord + bubbleWidth / 2,
            yCord - distance,
            xCord + bubbleWidth / 2 + ((fontSize + (fontSize / 2)) / 2),
            yCord - distance + ((fontSize + (fontSize / 2)) / 2),
            false
        );
        draw_triangle
        (
            xCord + bubbleWidth / 2 - fontSize,
            yCord - distance,
            xCord + bubbleWidth / 2,
            yCord - distance,
            xCord + bubbleWidth / 2 + ((fontSize + (fontSize / 2)) / 2),
            yCord - distance + ((fontSize + (fontSize / 2)) / 2),
            false
        );
        
        // Bottom left corner
        draw_triangle
        (
            xCord - bubbleWidth / 2,
            yCord - distance - fontSize,
            xCord - bubbleWidth / 2,
            yCord - distance,
            xCord - bubbleWidth / 2 - ((fontSize + (fontSize / 2)) / 2),
            yCord - distance + ((fontSize + (fontSize / 2)) / 2),
            false
        );
        draw_triangle
        (
            xCord - bubbleWidth / 2 + fontSize,
            yCord - distance,
            xCord - bubbleWidth / 2,
            yCord - distance,
            xCord - bubbleWidth / 2 - ((fontSize + (fontSize / 2)) / 2),
            yCord - distance + ((fontSize + (fontSize / 2)) / 2),
            false
        );
    }
    else
    {
        // Top left corner
        draw_triangle
        (
            xCord,
            yCord + fontSize,
            xCord,
            yCord,
            xCord - ((fontSize + (fontSize / 2)) / 2),
            yCord - ((fontSize + (fontSize / 2)) / 2),
            false
        );
        draw_triangle
        (
            xCord + fontSize,
            yCord,
            xCord,
            yCord,
            xCord - ((fontSize + (fontSize / 2)) / 2),
            yCord - ((fontSize + (fontSize / 2)) / 2),
            false
        );
        
        // Top right corner
        draw_triangle
        (
            xCord + bubbleWidth + 1,
            yCord + fontSize,
            xCord + bubbleWidth + 1,
            yCord,
            xCord + bubbleWidth + ((fontSize + (fontSize / 2)) / 2),
            yCord - ((fontSize + (fontSize / 2)) / 2),
            false
        );
        draw_triangle
        (
            xCord + bubbleWidth - fontSize,
            yCord,
            xCord + bubbleWidth + 1,
            yCord,
            xCord + bubbleWidth + ((fontSize + (fontSize / 2)) / 2),
            yCord - ((fontSize + (fontSize / 2)) / 2),
            false
        );
        
        // Bottom right corner
        draw_triangle
        (
            xCord + bubbleWidth + 1,
            yCord + bubbleHeight - fontSize,
            xCord + bubbleWidth + 1,
            yCord + bubbleHeight,
            xCord + bubbleWidth + ((fontSize + (fontSize / 2)) / 2),
            yCord + bubbleHeight + ((fontSize + (fontSize / 2)) / 2),
            false
        );
        draw_triangle
        (
            xCord + bubbleWidth - fontSize,
            yCord + bubbleHeight,
            xCord + bubbleWidth + 1,
            yCord + bubbleHeight,
            xCord + bubbleWidth + ((fontSize + (fontSize / 2)) / 2),
            yCord + bubbleHeight + ((fontSize + (fontSize / 2)) / 2),
            false
        );
        
        // Bottom left corner
        draw_triangle
        (
            xCord,
            yCord + bubbleHeight - fontSize,
            xCord,
            yCord + bubbleHeight,
            xCord - ((fontSize + (fontSize / 2)) / 2),
            yCord + bubbleHeight + ((fontSize + (fontSize / 2)) / 2),
            false
        );
        draw_triangle
        (
            xCord + fontSize,
            yCord + bubbleHeight,
            xCord,
            yCord + bubbleHeight,
            xCord - ((fontSize + (fontSize / 2)) / 2),
            yCord + bubbleHeight + ((fontSize + (fontSize / 2)) / 2),
            false
        );
    }
    
    // Top and bottom
    var loopAmount = (bubbleWidth - (fontSize * 2)) / (fontSize * 2) + 1;
    var halfSpikeLength = ((bubbleWidth - (fontSize * 2)) / loopAmount / 2);
    for (var loopCount = 0; loopCount &lt;= loopAmount; loopCount++)
    {    
        if (loopAmount == 1) {
            loopCount++;
        }
        if(actor != -1)
        {
            if (loopAmount == 1) {
                // Top
                draw_triangle
                (
                    xCord - bubbleWidth / 2,
                    yCord - bubbleHeight - distance,
                    xCord + bubbleWidth / 2,
                    yCord - bubbleHeight - distance,
                    xCord,
                    yCord - bubbleHeight - distance - fontSize,
                    false
                );
    
                // Bottom
                draw_triangle
                (
                    xCord - bubbleWidth / 2,
                    yCord - distance,
                    xCord + bubbleWidth / 2,
                    yCord - distance,
                    xCord,
                    yCord - distance + fontSize,
                    false
                );
            }
            else
            {
                // Top
                draw_triangle
                (
                    xCord - bubbleWidth / 2 + fontSize - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    yCord - bubbleHeight - distance,
                    xCord - bubbleWidth / 2 + fontSize + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    yCord - bubbleHeight - distance,
                    xCord - bubbleWidth / 2 + fontSize + (halfSpikeLength * loopCount * 2),
                    yCord - bubbleHeight - distance - fontSize,
                    false
                );
    
                // Bottom
                draw_triangle
                (
                    xCord - bubbleWidth / 2 + fontSize - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    yCord - distance,
                    xCord - bubbleWidth / 2 + fontSize + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    yCord - distance,
                    xCord - bubbleWidth / 2 + fontSize + (halfSpikeLength * loopCount * 2),
                    yCord - distance + fontSize,
                    false
                );
            }
        }
        else
        {
            if (loopAmount == 1)
            {
                // Top
                draw_triangle
                (
                    xCord,
                    yCord,
                    xCord + bubbleWidth,
                    yCord,
                    xCord + bubbleWidth / 2,
                    yCord - fontSize,
                    false
                );
                
                // Bottom
                draw_triangle
                (
                    xCord,
                    yCord + bubbleHeight,
                    xCord + bubbleWidth,
                    yCord + bubbleHeight,
                    xCord + bubbleWidth / 2,
                    yCord + bubbleHeight + fontSize,
                    false
                );
            }
            else
            {
                // Top
                draw_triangle
                (
                    xCord + fontSize - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    yCord,
                    xCord + fontSize + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    yCord,
                    xCord + fontSize + (halfSpikeLength * loopCount * 2),
                    yCord - fontSize,
                    false
                );
                
                // Bottom
                draw_triangle
                (
                    xCord + fontSize - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    yCord + bubbleHeight,
                    xCord + fontSize + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    yCord + bubbleHeight,
                    xCord + fontSize + (halfSpikeLength * loopCount * 2),
                    yCord + bubbleHeight + fontSize,
                    false
                );
            }
        }
    }
    
    // Left and Right
    loopAmount = floor((bubbleHeight - (fontSize * 2)) / (fontSize * 2)) + 1;
    halfSpikeLength = floor((bubbleHeight - (fontSize * 2)) / loopAmount) / 2;
    for (var loopCount = 0; loopCount &lt;= loopAmount; loopCount++)
    {
        if (loopAmount == 1) {
            loopCount++;
        }
        if (actor != -1)
        {
            if (loopAmount == 1) 
            {
                // Left
                draw_triangle
                (
                    xCord - bubbleWidth / 2,
                    yCord - bubbleHeight - distance,
                    xCord - bubbleWidth / 2,
                    yCord - distance,
                    xCord - bubbleWidth / 2 - fontSize,
                    yCord - bubbleHeight / 2 - distance,
                    false
                );
                
                // Right
                draw_triangle
                (
                    xCord + bubbleWidth / 2,
                    yCord - bubbleHeight - distance,
                    xCord + bubbleWidth / 2,
                    yCord - distance,
                    xCord + bubbleWidth / 2 + fontSize,
                    yCord - bubbleHeight / 2 - distance,
                    false
                );
            }
            else
            {
                // Left
                draw_triangle
                (
                    xCord - bubbleWidth / 2,
                    yCord - bubbleHeight - distance + fontSize + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    xCord - bubbleWidth / 2,
                    yCord - bubbleHeight - distance + fontSize - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    xCord - bubbleWidth / 2 - fontSize,
                    yCord - bubbleHeight - distance + fontSize + (halfSpikeLength * loopCount * 2),
                    false
                );
                
                // Right
                draw_triangle
                (
                    xCord + bubbleWidth / 2,
                    yCord - bubbleHeight - distance + fontSize + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    xCord + bubbleWidth / 2,
                    yCord - bubbleHeight - distance + fontSize - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    xCord + bubbleWidth / 2 + fontSize,
                    yCord - bubbleHeight - distance + fontSize + (halfSpikeLength * loopCount * 2),
                    false
                );
            }
        }
        else
        {
            if (loopAmount == 1) 
            {
                // Left
                draw_triangle
                (
                    xCord,
                    yCord,
                    xCord,
                    yCord + bubbleHeight,
                    xCord - fontSize,
                    yCord + bubbleHeight / 2,
                    false
                );
                
                // Right
                draw_triangle
                (
                    xCord + bubbleWidth,
                    yCord,
                    xCord + bubbleWidth,
                    yCord + bubbleHeight,
                    xCord + bubbleWidth + fontSize,
                    yCord + bubbleHeight / 2,
                    false
                );
            }
            else
            {
                // Left
                draw_triangle
                (
                    xCord,
                    yCord + fontSize + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    xCord,
                    yCord + fontSize - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    xCord - fontSize,
                    yCord + fontSize + (halfSpikeLength * loopCount * 2),
                    false
                );
                
                // Right
                draw_triangle
                (
                    xCord + bubbleWidth,
                    yCord + fontSize + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    xCord + bubbleWidth,
                    yCord + fontSize - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    xCord + bubbleWidth + fontSize,
                    yCord + fontSize + (halfSpikeLength * loopCount * 2),
                    false
                );
            }
        }
    } 
    
    //triangle
    if (actor != -1) 
    {
        // We add "+1" here to make sure it's just outside the actual bubble
        draw_triangle
        (
            xCord - fontSize, 
            yCord - distance + 1, 
            xCord + fontSize,
            yCord - distance + 1,
            xCord,
            yCord - actor.sprite_yoffset,
            false
        );
    }
    
    //text
    draw_set_font(font);
    draw_set_color(color);
    if (actor != -1) 
    {
        draw_text_ext_transformed
        (
            xCord + fontSize - (bubbleWidth / 2),
            yCord + (fontSize / 1.5) - bubbleHeight - distance, 
            charactersToDraw, 
            fontSize * (fontSize / 2),
            bubbleMaxLength,
            fontScale,
            fontScale,
            0,
        );
    }
    else
    {
        draw_text_ext_transformed
        (
            xCord + fontSize,
            yCord + (fontSize / 1.5), 
            charactersToDraw, 
            fontSize * (fontSize / 2),
            bubbleMaxLength,
            fontScale,
            fontScale,
            0,
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw dialogbubble type 2

if (loadComplete &amp;&amp; type == 2)
{
    draw_set_color(bubbleColor);
    if (actor != -1) 
    {
        var distance = actor.sprite_yoffset + characterDistance;
        var xCord = actor.x - view_xview[0];
        var yCord = actor.y - view_yview[0];
        
        draw_rectangle
        (
            xCord - bubbleWidth / 2, 
            yCord - bubbleHeight - distance, 
            xCord + bubbleWidth / 2, 
            yCord - distance,
            false
        );
    }
    else
    {
        var xCord = x - view_xview[0];
        var yCord = y - view_yview[0];
        
        draw_rectangle
        (
            xCord, 
            yCord, 
            xCord + bubbleWidth, 
            yCord + bubbleHeight,
            false
        );
    }
    
    //type 1 cosmetic loop
    
    if (actor != -1)
    {
        // Top left corner
        draw_circle
        (
            xCord - bubbleWidth / 2 + (fontSize / 2),
            yCord - bubbleHeight - distance + (fontSize / 2),
            fontSize,
            false
        );
        
        // Top right corner
        draw_circle
        (
            xCord + bubbleWidth / 2 - (fontSize / 2),
            yCord - bubbleHeight - distance + (fontSize / 2),
            fontSize,
            false
        );
        
        // Bottom right corner
        draw_circle
        (
            xCord + bubbleWidth / 2 - (fontSize / 2),
            yCord - distance - (fontSize / 2),
            fontSize,
            false
        );
        
        // Bottom left corner
        draw_circle
        (
            xCord - (bubbleWidth / 2) + (fontSize / 2),
            yCord - distance - (fontSize / 2),
            fontSize,
            false
        );
    }
    else
    {
        // Top left corner
        draw_circle
        (
            xCord + fontSize / 2,
            yCord + fontSize / 2,
            fontSize,
            false
        );
        
        // Top right corner
        draw_circle
        (
            xCord + bubbleWidth - fontSize / 2,
            yCord + fontSize / 2,
            fontSize,
            false
        );
        
        // Bottom right corner
        draw_circle
        (
            xCord + bubbleWidth - fontSize / 2,
            yCord + bubbleHeight - fontSize / 2,
            fontSize,
            false
        );
        
        // Bottom left corner
        draw_circle
        (
            xCord + fontSize / 2,
            yCord + bubbleHeight - fontSize / 2,
            fontSize,
            false
        );
    }
    
    // Top and bottom
    var loopAmount = floor((bubbleWidth - fontSize) / (fontSize * 2)) + 1;
    var distanceBetweenEllipses = floor(((bubbleWidth - fontSize / 2) / loopAmount) / 2);
    for (var loopCount = 0; loopCount &lt; loopAmount; loopCount++)
    {    
        if(actor != -1)
        {
            if (loopAmount == 1) {
                // Top
                draw_ellipse
                (
                    xCord - bubbleWidth / 2 + fontSize - distanceBetweenEllipses,
                    yCord - bubbleHeight - distance - (fontSize / 2),
                    xCord - bubbleWidth / 2 + fontSize + floor(distanceBetweenEllipses * 1.5),
                    yCord - bubbleHeight - distance + (fontSize / 2),
                    false
                );
    
                // Bottom
                draw_ellipse
                (
                    xCord - bubbleWidth / 2 + fontSize - distanceBetweenEllipses,
                    yCord - distance + (fontSize / 2),
                    xCord - bubbleWidth / 2 + fontSize + floor(distanceBetweenEllipses * 1.5),
                    yCord - distance - (fontSize / 2),
                    false
                );
            }
            else
            {
                // Top
                draw_ellipse
                (
                    xCord - bubbleWidth / 2 + fontSize - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    yCord - bubbleHeight - distance - (fontSize / 2),
                    xCord - bubbleWidth / 2 + fontSize + floor(distanceBetweenEllipses * 1.5) + (distanceBetweenEllipses * loopCount * 2),
                    yCord - bubbleHeight - distance + (fontSize / 2),
                    false
                );
                
                // Bottom
                draw_ellipse
                (
                    xCord - bubbleWidth / 2 + fontSize - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    yCord - distance + (fontSize / 2),
                    xCord - bubbleWidth / 2 + fontSize + floor(distanceBetweenEllipses * 1.5) + (distanceBetweenEllipses * loopCount * 2),
                    yCord - distance - (fontSize / 2),
                    false
                );
            }
        }
        else
        {
            if (loopAmount == 1)
            {
                // Top
                draw_ellipse
                (
                    xCord,
                    yCord - (fontSize / 2),
                    xCord + bubbleWidth,
                    yCord + (fontSize / 2),
                    false
                );
                
                // Bottom
                draw_ellipse
                (
                    xCord,
                    yCord + bubbleHeight - (fontSize / 2),
                    xCord + bubbleWidth,
                    yCord + bubbleHeight + (fontSize / 2),
                    false
                );
            }
            else
            {
                // Top
                draw_ellipse
                (
                    xCord + fontSize - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    yCord - (fontSize / 2),
                    xCord + fontSize + floor(distanceBetweenEllipses * 1.5) + (distanceBetweenEllipses * loopCount * 2),
                    yCord + (fontSize / 2),
                    false
                );
                
                // Bottom
                draw_ellipse
                (
                    xCord + fontSize - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    yCord + bubbleHeight - (fontSize / 2),
                    xCord + fontSize + floor(distanceBetweenEllipses * 1.5) + (distanceBetweenEllipses * loopCount * 2),
                    yCord + bubbleHeight + (fontSize / 2),
                    false
                );
            }
        }
    }
    
    // Left and Right
    loopAmount = floor((bubbleHeight - fontSize) / (fontSize * 2)) + 1;
    distanceBetweenEllipses = floor(((bubbleHeight - fontSize / 2) / loopAmount) / 2);
    for (var loopCount = 0; loopCount &lt;= loopAmount; loopCount++)
    {
        if (actor != -1)
        {
            if (loopAmount == 1) 
            {
                /*
                // Left
                draw_circle
                (
                    xCord - bubbleWidth / 2,
                    yCord - bubbleHeight - distance,
                    (fontSize / 2),
                    false
                );
                
                // Right
                draw_circle
                (
                    xCord + bubbleWidth / 2,
                    yCord - bubbleHeight - distance,
                    (fontSize / 2),
                    false
                );
                */
            }
            else
            {
                // Left
                draw_ellipse
                (
                    xCord - bubbleWidth / 2 - (fontSize / 2),
                    yCord - bubbleHeight - distance - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    xCord - bubbleWidth / 2 + (fontSize / 2),
                    yCord - bubbleHeight - distance + distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    false
                );
                
                // Right
                draw_circle
                (
                    xCord + bubbleWidth / 2,
                    yCord - bubbleHeight - distance + fontSize + distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    (fontSize / 2),
                    false
                );
            }
        }
        else
        {
            if (loopAmount == 1) 
            {
                // Left
                draw_circle
                (
                    xCord,
                    yCord,
                    (fontSize / 2),
                    false
                );
                
                // Right
                draw_circle
                (
                    xCord + bubbleWidth,
                    yCord,
                    (fontSize / 2),
                    false
                );
            }
            else
            {
                // Left
                draw_circle
                (
                    xCord,
                    yCord + fontSize + distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    (fontSize / 2),
                    false
                );
                
                // Right
                draw_circle
                (
                    xCord + bubbleWidth,
                    yCord + fontSize + distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    (fontSize / 2),
                    false
                );
            }
        }
    }
    
    //triangle
    if (actor != -1) 
    {
        // We add "+1" here to make sure it's just outside the actual bubble
        draw_circle
        (
            xCord - fontSize, 
            yCord - distance + 1, 
            (fontSize / 2),
            false
        );
    }
    
    //text
    draw_set_font(font);
    draw_set_color(color);
    if (actor != -1) 
    {
        draw_text_ext_transformed
        (
            xCord + fontSize - (bubbleWidth / 2),
            yCord + (fontSize / 1.5) - bubbleHeight - distance, 
            charactersToDraw, 
            fontSize * (fontSize / 2),
            bubbleMaxLength,
            fontScale,
            fontScale,
            0,
        );
    }
    else
    {
        draw_text_ext_transformed
        (
            xCord + fontSize,
            yCord + (fontSize / 1.5), 
            charactersToDraw, 
            fontSize * (fontSize / 2),
            bubbleMaxLength,
            fontScale,
            fontScale,
            0,
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Advance dialog
if (write &amp;&amp; skipable)
{
    charactersToDraw = previousCharactersDrawn + dialog;
    charactersDrawn = dialogLength;
    if (typewriter == 2)
    {
        splitDialogsToDraw = ds_list_size(splitDialog);
    }
}
else if (newDialog &amp;&amp; endOfDialog &amp;&amp; !write &amp;&amp; closeable)
{
    previousCharactersDrawn = "";
    charactersToDraw = "";
    endOfDialog = false;
    write = true;
    if (typewriter == 2)
    {
        ds_list_clear(splitDialog);
        splitDialogsToDraw = 0;
    }
}
else if (endOfDialog &amp;&amp; !write &amp;&amp; closeable)
{
    if (typewriter == 2)
    {
        ds_list_destroy(splitDialog);
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
