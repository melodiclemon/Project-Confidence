<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item array

// create the item array and populate it

/*
ITEM ARRAY SYNTAX
0 - id 
1 - name
2 - description
3 - value
4 - use (script)
5 - item type
*/

item[0,itemData.itemId] = 0;
item[0,itemData.name] = "";
item[0,itemData.description] = "";
item[0,itemData.value] = 0;
item[0,itemData.use] = noone;
item[0,itemData.type] = itemType.weapon;


item[1,itemData.itemId] = 1;
item[1,itemData.name] = "Stick";
item[1,itemData.description] = "A wooden stick, not worth a damn";
item[1,itemData.value] = 0;
item[1,itemData.use] = weapon_stick;
item[1,itemData.type] = itemType.weapon;

item[2,itemData.itemId] = 2;
item[2,itemData.name] = "Blanket";
item[2,itemData.description] = "";
item[2,itemData.value] = 0;
item[2,itemData.use] = noone;
item[2,itemData.type] = itemType.armor;

item[3,itemData.itemId] = 3;
item[3,itemData.name] = "Nutty Bar";
item[3,itemData.description] = "";
item[3,itemData.value] = 0;
item[3,itemData.use] = noone;
item[3,itemData.type] = itemType.consumable;

item[4,itemData.itemId] = 4;
item[4,itemData.name] = "Fist";
item[4,itemData.description] = "";
item[4,itemData.value] = 0;
item[4,itemData.use] = weapon_fist;
item[4,itemData.type] = itemType.weapon;

item[5,itemData.itemId] = 5;
item[5,itemData.name] = "Stale Candy";
item[5,itemData.description] = "";
item[5,itemData.value] = 0;
item[5,itemData.use] = noone;
item[5,itemData.type] = itemType.consumable;

item[6,itemData.itemId] = 6;
item[6,itemData.name] = "Chewing Gum";
item[6,itemData.description] = "";
item[6,itemData.value] = 0;
item[6,itemData.use] = noone;
item[6,itemData.type] = itemType.consumable;

item[7,itemData.itemId] = 7;
item[7,itemData.name] = "Cough Syrup";
item[7,itemData.description] = "";
item[7,itemData.value] = 0;
item[7,itemData.use] = noone;
item[7,itemData.type] = itemType.consumable;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

//the items that are in the inventory and how many of those items we have
inventory = ds_list_create();
inventoryCount = ds_list_create();

inventoryPosition = 0; //the position in the inventory that we currently are at.

itemsDisplayed = 5; //amounts of items shown at any given time

weaponEquipped = -1; //id of the weapon currently equipped
armorEquipped = -1; // id of the armor currently equipped

//sprites and sprite-related variables
bg = spr_inventoryBase;
arrow = spr_inventoryArrow;
attackBase = spr_inventoryAttackBase;
defenseBase = spr_inventoryDefenseBase;
chanceBase = spr_inventoryChanceBase;


bgX = sprite_get_width(bg)/4;
bgY = view_hview[view_current]/2-sprite_get_height(bg)-(sprite_get_height(bg)/5);

player = obj_player; //what player object it is looking at

//adding items
inventory_addItem(3);
inventory_addItem(3);
inventory_addItem(3);
inventory_addItem(2);
inventory_addItem(7);
inventory_addItem(4);
inventory_addItem(5);
inventory_addItem(6);
inventory_addItem(6);
inventory_addItem(7);


inventory_useItem(4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make sure we are looking at the correct player
if(room != Combat_Room)
{
    player = obj_player;
}
else
{
    player = obj_unitFriend;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory Interaction
   

if(instance_exists(player))
{
    if(player.sprite_index == spr_player_bagIdle) // TODO: Change this if-statement so it works both in Combat and in the Overworld
    {
        //interaction with the item boxes
        for(i = 0; i &lt; itemsDisplayed; i++)
        {
            if(point_in_rectangle(view_xmouse(0),view_ymouse(0), bgX+6,bgY+13+(i*13),bgX+56,bgY+21+(i*13)))
            {
                if(mouse_check_button_pressed(mb_left))
                {
                    if(weaponEquipped != inventory[| i+inventoryPosition] || armorEquipped != inventory[| i+inventoryPosition])    
                    {
                        if(room == Combat_Room &amp;&amp; !player.playedCard)
                        {
                            inventory_useItem(inventory[| i+inventoryPosition]);
                            player.itemUsed = true;   
                        }
                        else if(room != Combat_Room)
                             inventory_useItem(inventory[| i+inventoryPosition]);
                    }
                }       
            }
        }
        // interaction with the lower arrow
        if(inventoryPosition+itemsDisplayed &lt; ds_list_size(inventory))
        {
            if(point_in_rectangle(view_xmouse(0),view_ymouse(0),bgX+29,bgY+76,bgX+35,bgY+81))
            {
                if(mouse_check_button_pressed(mb_left))
                {
                    inventoryPosition++;
                    
                }
            }
        }
        
        // interaction with the upper arrow
        if(inventoryPosition != 0)
        {
            if(point_in_rectangle(view_xmouse(0),view_ymouse(0),bgX+29,bgY+3,bgX+35,bgY+9))
            {
                if(mouse_check_button_pressed(mb_left))
                {
                    inventoryPosition--;
                    
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the inventory

if(instance_exists(player))
{
    if(player.sprite_index == spr_player_bagIdle) // TODO: Change this if-statement so it works both in Combat and in the Overworld
    {
    
        //draw the background
        draw_sprite(bg,0,bgX,bgY);
        
        //draw upper arrow
        if(inventoryPosition != 0)
            draw_sprite_ext(arrow,0,bgX+29,bgY+10,1,-1,0,c_white,1);
        
        //draw lower arrow
        if(inventoryPosition+itemsDisplayed &lt; ds_list_size(inventory))
            draw_sprite_ext(arrow,0,bgX+29,bgY+76,1,1,0,c_white,1);
        
        //draw strong numbers
        draw_sprite(attackBase,0,bgX,bgY-14);
            
        //draw defense 
        draw_sprite(defenseBase,0,bgX+42,bgY-14);
        
        //draw chance
        draw_sprite(chanceBase,0,bgX+6,bgY+87);
          
        //draw items
        for(i = 0; i &lt; itemsDisplayed; i++)
        {
            //if the slot does not contain an item we don't draw it.
            if(item[ds_list_find_value(inventory,i+inventoryPosition),itemData.itemId] == 0)
                continue
            else
            {
                //draw item name
                if(item[ds_list_find_value(inventory,i+inventoryPosition),itemData.itemId] == weaponEquipped || item[ds_list_find_value(inventory,i+inventoryPosition),itemData.itemId] == armorEquipped)
                    draw_set_color(c_yellow);
                else
                    draw_set_color(c_white);
                    
                draw_set_valign(fa_center);
                draw_set_halign(fa_left);
                draw_text_transformed(bgX+7,bgY+17+(i*13),item[ds_list_find_value(inventory,i+inventoryPosition),itemData.name],0.3,0.3,0);
                
                //draw amount
                draw_set_halign(fa_right);
                draw_text_transformed(bgX+55,bgY+17+(i*13),string("x")+string_lpad(string(inventoryCount[| i+inventoryPosition]),2,"0"),.3,.3,0);
                
                //reset draw
                draw_set_color(c_black);
                draw_set_valign(fa_top);
                draw_set_halign(fa_left);
            }
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
