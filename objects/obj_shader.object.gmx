<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-148661862</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

//disable the application surface since we are going to draw our own surface.
application_surface_draw_enable(0);
//General variables
sur = noone // Surface

color_red = 0;
color_green = 0;
color_blue = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enable the application_surface again
application_surface_draw_enable(1);

//make sure we free the surface from the memory when we are done using it.
if(surface_exists(sur))
{
    surface_free(sur);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG

application_surface_draw_enable(0);

if(keyboard_check_pressed(ord('Q')))
    color_red+=0.1;
else if(keyboard_check_pressed(ord('A')))
    color_red-=0.1;
else if(keyboard_check_pressed(ord('W')))
    color_green+=0.1;
else if(keyboard_check_pressed(ord('S')))
    color_green-=0.1;
else if(keyboard_check_pressed(ord('E')))
    color_blue+=0.1;
else if(keyboard_check_pressed(ord('D')))
    color_blue-=0.1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw shader

//if the surface doesn't exist we create it.
if(!surface_exists(sur))
{
    sur = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));
}

// resize the application surface so that we can make a perfect copy of it to our 
// created surface.
if(surface_exists(application_surface) &amp;&amp; surface_exists(sur))
{
    surface_copy(sur,0,0,application_surface); 
}

//Draw the surface
if(surface_exists(sur))
{
    if(shader_is_compiled(shd_green))
    {
        shader_set(shd_green);
        var shader_params_red = shader_get_uniform(shd_green,"c_red");
        shader_set_uniform_f(shader_params_red,color_red);
        var shader_params_blue = shader_get_uniform(shd_green,"c_blue");
        shader_set_uniform_f(shader_params_blue,color_blue);
        var shader_params_green = shader_get_uniform(shd_green,"c_green");
        shader_set_uniform_f(shader_params_green,color_green);
        draw_surface(sur,0,0);
        shader_reset();
    }
    else
    {
         draw_surface(sur,0,0);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
draw_set_color(c_white);
draw_text(50,50,"R:" +string(color_red) +",G:"+string(color_green)+",B:"+string(color_blue));
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
