<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item array

// create the item array and populate it

/*
ITEM ARRAY SYNTAX
0 - id 
1 - name
2 - description
3 - value
4 - use (script)
*/

item[0,itemData.itemId] = 0;
item[0,itemData.name] = "Stick";
item[0,itemData.description] = "A wooden stick, not worth a damn";
item[0,itemData.value] = 0;
item[0,itemData.use] = weapon_stick;

item[1,itemData.itemId] = 0;
item[1,itemData.name] = "Blanket";
item[1,itemData.description] = "A wooden stick, not worth a damn";
item[1,itemData.value] = 0;
item[1,itemData.use] = weapon_stick;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create inventory &amp; initialize

inventoryPosition = 0;

inventory = ds_list_create();
state = inventory_idleState;

//initialize visible inventory-array.
for(var i = 0; i &lt; 5; i++)
{
    visibleInventory[i] = -1;
}

//create item objects
for(var j = 0; j &lt; 5; j++)
{
    itemObject[j] = instance_create(0,0,InventoryItem);
}

// create inventory arrows
inventoryArrowUp = instance_create(50,50,InventoryArrow);
inventoryArrowDown = instance_create(50,60,InventoryArrow);
inventoryArrowDown.image_yscale = -1;


//test adding items to the inventory

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute state

if(state != noone)
    script_execute(state);
    
    //show_debug_message(visibleInventory[0]);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update item objects positions

for(var i = 0; i &lt; array_length_1d(itemObject); i++)
{
    itemObject[i].x = view_xview[view_current]+(display_get_gui_width()/2)-sprite_get_xoffset(spr_inventoryBackground);
    itemObject[i].y = view_yview[view_current]+(display_get_gui_height()/2-sprite_get_height(spr_inventoryBackground)+17+(i*13));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///close lists and other data-structures


//close inventory list
ds_list_destroy(inventory);

//destroy item-objects
for(var i = 0; i &lt; 5; i++)
{
    with(itemObject[i])
    {
        instance_destroy();
    }
}

//Destroy arrow objects
with(inventoryArrowUp)
    instance_destroy();
    
with(inventoryArrowDown)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the inventory



//draw the inventory-box
if(obj_player.state == Player_Overworld_Inventory)
{
    draw_set_alpha(0.8);
    draw_sprite(spr_inventoryBackground,0,(display_get_gui_width()/2)-sprite_get_xoffset(spr_inventoryBackground),(display_get_gui_height()/2)-sprite_get_yoffset(spr_inventoryBackground));
    draw_set_alpha(1);
    //draw item names unless our inventory is empty
    if(ds_list_size(inventory) != 0)
    {
        for(var i = 0; i &lt; 5; i++)
        {
            if(visibleInventory[i] == -1)
                continue;
            else
            {
                draw_set_color(c_white);
                draw_text_transformed((display_get_gui_width()/2)-sprite_get_width(spr_inventoryBackground)+5,(display_get_gui_height()/2)-sprite_get_height(spr_inventoryBackground)+14+(i*13),item[visibleInventory[i],itemData.name],0.5,0.5,0);
                draw_set_color(c_black);
            }
        }    
        
    }

} 



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
