<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item array

// create the item array and populate it

/*
TRICK ARRAY SYNTAX
0 - id 
1 - name
2 - description
3 - use
*/

trick[0,trickData.trickId] = 0;
trick[0,trickData.name] = "";
trick[0,trickData.description] = "";
trick[0,trickData.use] = 0;

trick[1,trickData.trickId] = 1;
trick[1,trickData.name] = "Bark";
trick[1,trickData.description] = "Howl my little friend!";
trick[1,trickData.use] = trick_bark;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

//the tricks that are in the inventory.
inventory = ds_list_create();

inventoryPosition = 0; //the position in the inventory that we currently are at.

itemsDisplayed = 5; //amounts of items shown at any given time

trickEquipped = -1; //id of the trick currently equipped


//sprites and sprite-related variables
bg = spr_inventoryBase;
arrow = spr_inventoryArrow;

bgX = sprite_get_width(bg)/4;
bgY = view_hview[view_current]/2-sprite_get_height(bg)-(sprite_get_height(bg)/5);

player = obj_player; //what player object it is looking at

//adding items
inventory_addItem(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make sure we are looking at the correct player
if(room != Combat_Room)
    player = obj_player;
else
    player = obj_unitFriend;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory Interaction

if(player.state == player_overworld_doggieMenuState) // TODO: Change this if-statement so it works both in Combat and in the Overworld
{
    //interaction with the item boxes
    for(i = 0; i &lt; tricksDisplayed; i++)
    {
        if(point_in_rectangle(view_xmouse(0),view_ymouse(0), bgX+6,bgY+13+(i*13),bgX+56,bgY+21+(i*13)))
        {
            if(mouse_check_button_pressed(mb_left))
            {
                if(weaponEquipped != inventory[| i+inventoryPosition] || armorEquipped != inventory[| i+inventoryPosition])    
                {
                         doggieMenu_useTrick(inventory[| i+inventoryPosition]);
                }
            }       
        }
    }
    // interaction with the lower arrow
    if(inventoryPosition+tricksDisplayed &lt; ds_list_size(inventory))
    {
        if(point_in_rectangle(view_xmouse(0),view_ymouse(0),bgX+29,bgY+76,bgX+35,bgY+81))
        {
            if(mouse_check_button_pressed(mb_left))
            {
                inventoryPosition++;
                
            }
        }
    }
    
    // interaction with the upper arrow
    if(inventoryPosition != 0)
    {
        if(point_in_rectangle(view_xmouse(0),view_ymouse(0),bgX+29,bgY+3,bgX+35,bgY+9))
        {
            if(mouse_check_button_pressed(mb_left))
            {
                inventoryPosition--;
                
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the inventory


if(player.state == player_overworld_doggieMenuState) // TODO: Change this if-statement so it works both in Combat and in the Overworld
{
    
    //draw the background
    draw_sprite(bg,0,bgX,bgY);
    
    //draw upper arrow
    if(inventoryPosition != 0)
        draw_sprite_ext(arrow,0,bgX+29,bgY+10,1,-1,0,c_white,1);
    
    //draw lower arrow
    if(inventoryPosition+itemsDisplayed &lt; ds_list_size(inventory))
        draw_sprite_ext(arrow,0,bgX+29,bgY+76,1,1,0,c_white,1);
      
    //draw tricks
    for(i = 0; i &lt; itemsDisplayed; i++)
    {
        //if the slot does not contain an item we don't draw it.
        if(item[ds_list_find_value(inventory,i+inventoryPosition),itemData.itemId] == 0)
            continue
        else
        {
            //draw trick name
            if(item[ds_list_find_value(inventory,i+inventoryPosition),itemData.itemId] == weaponEquipped || item[ds_list_find_value(inventory,i+inventoryPosition),itemData.itemId] == armorEquipped)
                draw_set_color(c_yellow);
            else
                draw_set_color(c_white);
                
            draw_set_valign(fa_center);
            draw_text_transformed(bgX+7,bgY+17+(i*13),item[ds_list_find_value(inventory,i+inventoryPosition),itemData.name],0.3,0.3,0);
            
            //reset draw
            draw_set_color(c_black);
            draw_set_valign(fa_top);
            draw_set_halign(fa_left);
        }
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
