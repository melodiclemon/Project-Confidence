<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
currentRound = 0;
currentTurn = turn.upkeep;
card = false;
attackTarget = noone;
randomize();

battleList = ds_list_create();

entityDictionary = ds_map_create();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set up the battle

ds_list_copy(battleList,GameManager.battleList);
show_debug_message(ds_list_size(battleList));

for(var i = 0; i &lt; ds_list_size(battleList); i++)
{
   var t = instance_create(0,0,ds_list_find_value(battleList,i));
   t.x = 272-(56*i)+t.sprite_xoffset;
   t.y = 128+(t.sprite_yoffset/2);
}

var player = instance_create(0,0,obj_unitFriend);
player.x = 48;
player.y = 128 + player.sprite_yoffset/2;


instance_create(32,203,obj_deck);
instance_create(276,220,EndTurnButton);

show_debug_message(attackTarget);

ds_list_clear(battleList);
ds_list_clear(GameManager.battleList);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup the entity dictionary;

var i;

//add all the enemies.
for(i = 0; i &lt; instance_number(obj_unitFoe); i++)
{
    ds_map_add(entityDictionary,"foe"+string(i),instance_find(obj_unitFoe,i));
}

//add the player

ds_map_add(entityDictionary,"player",instance_find(obj_unitFriend,0));


//add the deck
ds_map_add(entityDictionary,"deck",instance_find(obj_deck,0));


//DEBUG

var key = ds_map_find_first(entityDictionary);

show_debug_message(object_get_name(entityDictionary[? key].object_index));
for(var i = 1; i &lt; ds_map_size(entityDictionary); i++)
{
    key = ds_map_find_next(entityDictionary,key);
    show_debug_message(object_get_name(entityDictionary[? key].object_index));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset attack &amp; cardPlayed each new turn
if(currentTurn == turn.upkeep)
{
    obj_unitFriend.attack = 0;
    obj_unitFriend.playedCard = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aquire a target

if(instance_number(obj_unitFoe) != 0 &amp;&amp; attackTarget == noone)
{
    attackTarget = instance_find(obj_unitFoe,0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Winning or losing

if(instance_number(obj_unitFoe) == 0)
{
    currentTurn = turn.finished;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for excess attack versus defense

if(attackTarget != noone &amp;&amp; currentTurn == turn.friend)
{
    if(obj_unitFriend.attack &gt; attackTarget.defense)
    {
        while(obj_unitFriend.attack &gt; attackTarget.defense)
        {
            obj_unitFriend.defense -= 1;
            obj_unitFriend.attack  = obj_unitFriend.attack - attackTarget.defense;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Turn

//change turn if all entities have completed their actions (scripts)

var i;
var key;
var changeTurn = true;

for(i = 0; i &lt; ds_map_size(entityDictionary); i++)
{
    if( i == 0)
    {
        key = ds_map_find_first(entityDictionary); 
        if(entityDictionary[? key].turnCompleted == false)
        {
            changeTurn = false;
            break;
        }
       
    }
    else
    {
        key = ds_map_find_next(entityDictionary,key);
        if(entityDictionary[? key].turnCompleted == false)
        {
            changeTurn = false;
            break;
        }
    }
}

if(changeTurn)
{
    switch (currentTurn)
    {
        case turn.friend:
        currentTurn = turn.action;
        break;
        
        case turn.foe:
        currentTurn = turn.upkeep;
        break;
        
        case turn.upkeep:
        currentTurn = turn.friend;
        currentRound++;
        break;
        
        case turn.action:
        currentTurn = turn.foe;
        break;
    }
    
    //reset the turnCompleted
    for(i = 0; i &lt; ds_map_size(entityDictionary); i++)
    {
        if( i == 0)
        {
            key = ds_map_find_first(entityDictionary); 
            entityDictionary[? key].turnCompleted = false;
        }
        else
        {
            key = ds_map_find_next(entityDictionary,key);
            entityDictionary[? key].turnCompleted = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw target arrow

if(attackTarget != noone)
{
    draw_sprite(spr_targetArrow,0,attackTarget.x,attackTarget.y-attackTarget.sprite_yoffset-3); 
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Victory Text
if(currentTurn == turn.finished)
    draw_text(room_width/2,room_height/4,"Winner!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
