<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

// MAKE SURE scr_LoadDialogFromFile has been run before this script runs!
// Note that dialogbubbles displayes /c endsyntax the same as /s.

// variables that can be altered before showing dialog
dialogID = "";
textSpeed = 1.5; // value should be between 0.1(instant) - 3(slow)
font = fnt_coolskeleton; // font to use. REPLACE WITH DEFAULT FONT
color = c_white; // text color
textSound = -1; // sound to play for each character in the dialog.
                // Won't be used if typewriter is set to false
write = false; // set to true when all variables have been set
typewriter = true; // set to false if all text should be shown at once
actor = ""; // id of the actorObject saying the dialog. Not necessary
characterDistance = 50; // distance from the character the dialogbubble 
                        // should be drawn
type = 0; // 0 == normal, 1 == shouting, 2 == thinking
closeable = true; // set to false if the player shouldn't be able to close the
                  // bubble manually

// variables that updates themself
dialog = ""; // current dialog to be written
nextDialogID = ""; // dialogID for the next dialog to be written
dialogLength = 0; // length of current dialog
charactersToDrawCurrentDialog = ""; // string of characters that should be drawn from the current dialog
charactersToDraw = ""; // string of characters that should be drawn
charactersDrawn = 0; // number of characters in the current dialog that should be drawn
previousCharactersDrawn = ""; // characters from previous dialogs that still needs to be drawn
startOfDialog = true; // is thie the start of the dialog row?
newDialog = false; // is there more dialog after this?
endOfDialog = false; // is it the end of the dialog tree?
fontSize = font_get_size(font); // the size of the font used
bubbleMaxLength = 450; // the maximum width of the dialogbubble
dialogWidth = 0; // the total width of the dialog
dialogHeight = 0; // the total height of the dialog
bubbleWidth = 0; // the total width of the dialogbubble
bubbleHeight = 0; // the total heigh of the dialogbubble
loadComplete = false; // if all values above have been set at least once
randomOffsetSmall = random_range(5, 15); // used to draw cosmetic details
randomOffsetBig = random_range(20, 30); // used to draw cosmetics details
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Format dialog string
if (startOfDialog == true &amp;&amp; write == true) 
{
    //reset newDialog
    newDialog = false;
    
    dialog = global.dialog[? dialogID];
    
    nextDialogID = string_rtrim(string_extract(dialog, "&gt;&gt;&gt;", 1));
    dialog = string_extract(dialog, "&gt;&gt;&gt;", 0);
    
    // format string after need    
    if (string_pos("/s", dialog) != 0 || string_pos("/c", dialog) != 0)
    {
        newDialog = true;
        endOfDialog = true;
        dialog = string_replace(dialog, "/s", "");
        dialog = string_replace(dialog, "/c", "");
    }
    
    if (string_pos("/e", dialog) != 0)
    {
        endOfDialog = true;
        dialog = string_replace(dialog, "/e", "");
    }
    
    // calculate dialog specific values
    draw_set_font(font);
    dialogLength = string_length(dialog);
    dialogWidth = string_width_ext
    (
        dialog,
        fontSize + (fontSize / 2),
        bubbleMaxLength
    );
    dialogHeight = string_height_ext
    (
        dialog,
        fontSize + (fontSize / 2),
        bubbleMaxLength
    )
    bubbleWidth = dialogWidth + fontSize * 2;
    bubbleHeight = dialogHeight + fontSize;
    
    startOfDialog = false;
    loadComplete = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decide characters to draw
if (write == true) 
{
    // if typewriter is false, we want to display the whole message right away
    if (!typewriter)
    {
        charactersToDrawCurrentDialog = dialog;
        charactersToDraw = previousCharactersDrawn + dialog;
        charactersDrawn = dialogLength + 1;
    }
    
    // if there's still characters left to draw
    if (floor(charactersDrawn) &lt;= dialogLength) 
    {
        // copy all characters that should be drawn this step
        charactersToDrawCurrentDialog = string_copy(dialog, 
                                                    0, 
                                                    charactersDrawn);
    
        // if there is a text sound and if a new character will be written                                       
        if(textSound != -1 &amp;&amp;
            typewriter &amp;&amp;
            charactersDrawn &lt; floor(charactersDrawn + (1 / textSpeed)))
        {
            audio_play_sound(textSound, 10, false);
        }
                                                    
        charactersDrawn += 1 / textSpeed;
        charactersToDraw = previousCharactersDrawn + charactersToDrawCurrentDialog;
    }
    else
    {
        // if we are at the end of the dialog
        if (newDialog)
        {
            // update variables necessary for reading a new dialog
            dialogID = nextDialogID;
            previousCharactersDrawn += charactersToDrawCurrentDialog;
            
            // reset variables necessary for reading a new dialog
            charactersToDrawCurrentDialog = "";
            startOfDialog = true;
            charactersDrawn = 0;
        }
        if (endOfDialog)
        {
            write = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw dialogbubble type 0

if (loadComplete &amp;&amp; type == 0)
{
    var distance = actor.sprite_yoffset + characterDistance;
    
    draw_set_color(c_black);
    if(actor != "") 
    {
        draw_roundrect_ext
        (
            x - bubbleWidth / 2, 
            y - bubbleHeight - distance, 
            x + bubbleWidth / 2, 
            y - distance, 
            20, 
            20, 
            false
        );
    }
    else
    {
        draw_roundrect_ext
        (
            x, 
            y, 
            x + bubbleWidth, 
            y + bubbleHeight, 
            20, 
            20, 
            false
        );
    }
    
    //triangle
    if(actor != "") 
    {
        // We add "+1" here to make sure it's just outside the actual bubble
        draw_triangle
        (
            x - randomOffsetBig, 
            y - distance + 1, 
            x + randomOffsetBig,
            y - distance + 1,
            actor.x,
            actor.y - actor.sprite_yoffset,
            false
        );
    }
    
    //text
    draw_set_font(font);
    draw_set_color(color);
    if(actor != "") 
    {
        draw_text_ext
        (
            x + fontSize - (bubbleWidth / 2),
            y + (fontSize / 1.8) - bubbleHeight - distance, 
            charactersToDraw, 
            fontSize * 1.3, 
            bubbleMaxLength
        );
    }
    else
    {
        draw_text_ext
        (
            x + fontSize,
            y + (fontSize / 1.8), 
            charactersToDraw, 
            fontSize * 1.3, 
            bubbleMaxLength
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw dialogbubble type 1

if (loadComplete &amp;&amp; type == 1)
{
    var distance = actor.sprite_yoffset + characterDistance;
    
    draw_set_color(c_black);
    if (actor != "") 
    {
        draw_rectangle
        (
            x - bubbleWidth / 2, 
            y - bubbleHeight - distance, 
            x + bubbleWidth / 2, 
            y - distance,
            false
        );
    }
    else
    {
        draw_rectangle
        (
            x, 
            y, 
            x + bubbleWidth, 
            y + bubbleHeight,
            false
        );
    }
    
    //type 1 cosmetic loop
    
    if (actor != "")
    {
        // Top left corner
        draw_triangle
        (
            x - bubbleWidth / 2,
            y - bubbleHeight - distance + randomOffsetBig,
            x - bubbleWidth / 2,
            y - bubbleHeight - distance,
            x - bubbleWidth / 2 - ((fontSize + randomOffsetSmall) / 2),
            y - bubbleHeight - distance - ((fontSize + randomOffsetSmall) / 2),
            false
        );
        draw_triangle
        (
            x - bubbleWidth / 2 + randomOffsetBig,
            y - bubbleHeight - distance,
            x - bubbleWidth / 2,
            y - bubbleHeight - distance,
            x - bubbleWidth / 2 - ((fontSize + randomOffsetSmall) / 2),
            y - bubbleHeight - distance - ((fontSize + randomOffsetSmall) / 2),
            false
        );
        
        // Top right corner
        draw_triangle
        (
            x + bubbleWidth / 2 + 1,
            y - bubbleHeight - distance + randomOffsetBig,
            x + bubbleWidth / 2 + 1,
            y - bubbleHeight - distance,
            x + bubbleWidth / 2 + ((fontSize + randomOffsetSmall) / 2),
            y - bubbleHeight - distance - ((fontSize + randomOffsetSmall) / 2),
            false
        );
        draw_triangle
        (
            x + bubbleWidth / 2 - randomOffsetBig,
            y - bubbleHeight - distance,
            x + bubbleWidth / 2 + 1,
            y - bubbleHeight - distance,
            x + bubbleWidth / 2 + ((fontSize + randomOffsetSmall) / 2),
            y - bubbleHeight - distance - ((fontSize + randomOffsetSmall) / 2),
            false
        );
        
        // Bottom right corner
        draw_triangle
        (
            x + bubbleWidth / 2 + 1,
            y - distance - randomOffsetBig,
            x + bubbleWidth / 2 + 1,
            y - distance,
            x + bubbleWidth / 2 + ((fontSize + randomOffsetSmall) / 2),
            y - distance + ((fontSize + randomOffsetSmall) / 2),
            false
        );
        draw_triangle
        (
            x + bubbleWidth / 2 - randomOffsetBig,
            y - distance,
            x + bubbleWidth / 2 + 1,
            y - distance,
            x + bubbleWidth / 2 + ((fontSize + randomOffsetSmall) / 2),
            y - distance + ((fontSize + randomOffsetSmall) / 2),
            false
        );
        
        // Bottom left corner
        draw_triangle
        (
            x - bubbleWidth / 2,
            y - distance - randomOffsetBig,
            x - bubbleWidth / 2,
            y - distance,
            x - bubbleWidth / 2 - ((fontSize + randomOffsetSmall) / 2),
            y - distance + ((fontSize + randomOffsetSmall) / 2),
            false
        );
        draw_triangle
        (
            x - bubbleWidth / 2 + randomOffsetBig,
            y - distance,
            x - bubbleWidth / 2,
            y - distance,
            x - bubbleWidth / 2 - ((fontSize + randomOffsetSmall) / 2),
            y - distance + ((fontSize + randomOffsetSmall) / 2),
            false
        );
    }
    else
    {
        // Top left corner
        draw_triangle
        (
            x,
            y + randomOffsetBig,
            x,
            y,
            x - ((fontSize + randomOffsetSmall) / 2),
            y - ((fontSize + randomOffsetSmall) / 2),
            false
        );
        draw_triangle
        (
            x + randomOffsetBig,
            y,
            x,
            y,
            x - ((fontSize + randomOffsetSmall) / 2),
            y - ((fontSize + randomOffsetSmall) / 2),
            false
        );
        
        // Top right corner
        draw_triangle
        (
            x + bubbleWidth + 1,
            y + randomOffsetBig,
            x + bubbleWidth + 1,
            y,
            x + bubbleWidth + ((fontSize + randomOffsetSmall) / 2),
            y - ((fontSize + randomOffsetSmall) / 2),
            false
        );
        draw_triangle
        (
            x + bubbleWidth - randomOffsetBig,
            y,
            x + bubbleWidth + 1,
            y,
            x + bubbleWidth + ((fontSize + randomOffsetSmall) / 2),
            y - ((fontSize + randomOffsetSmall) / 2),
            false
        );
        
        // Bottom right corner
        draw_triangle
        (
            x + bubbleWidth + 1,
            y + bubbleHeight - randomOffsetBig,
            x + bubbleWidth + 1,
            y + bubbleHeight,
            x + bubbleWidth + ((fontSize + randomOffsetSmall) / 2),
            y + bubbleHeight + ((fontSize + randomOffsetSmall) / 2),
            false
        );
        draw_triangle
        (
            x + bubbleWidth - randomOffsetBig,
            y + bubbleHeight,
            x + bubbleWidth + 1,
            y + bubbleHeight,
            x + bubbleWidth + ((fontSize + randomOffsetSmall) / 2),
            y + bubbleHeight + ((fontSize + randomOffsetSmall) / 2),
            false
        );
        
        // Bottom left corner
        draw_triangle
        (
            x,
            y + bubbleHeight - randomOffsetBig,
            x,
            y + bubbleHeight,
            x - ((fontSize + randomOffsetSmall) / 2),
            y + bubbleHeight + ((fontSize + randomOffsetSmall) / 2),
            false
        );
        draw_triangle
        (
            x + randomOffsetBig,
            y + bubbleHeight,
            x,
            y + bubbleHeight,
            x - ((fontSize + randomOffsetSmall) / 2),
            y + bubbleHeight + ((fontSize + randomOffsetSmall) / 2),
            false
        );
    }
    
    // Top and bottom
    var loopAmount = floor((bubbleWidth - (randomOffsetBig * 2)) / (fontSize * 2)) + 1;
    var halfSpikeLength = floor(((bubbleWidth - (randomOffsetBig * 2)) / loopAmount) / 2);
    for (var loopCount = 0; loopCount &lt;= loopAmount; loopCount++)
    {    
        if (loopAmount == 1) {
            loopCount++;
        }
        if(actor != "")
        {
            if (loopAmount == 1) {
                // Top
                draw_triangle
                (
                    x - bubbleWidth / 2,
                    y - bubbleHeight - distance,
                    x + bubbleWidth / 2,
                    y - bubbleHeight - distance,
                    x,
                    y - bubbleHeight - distance - randomOffsetBig,
                    false
                );
    
                // Bottom
                draw_triangle
                (
                    x - bubbleWidth / 2,
                    y - distance,
                    x + bubbleWidth / 2,
                    y - distance,
                    x,
                    y - distance + randomOffsetBig,
                    false
                );
            }
            else
            {
                // Top
                draw_triangle
                (
                    x - bubbleWidth / 2 + randomOffsetBig - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    y - bubbleHeight - distance,
                    x - bubbleWidth / 2 + randomOffsetBig + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    y - bubbleHeight - distance,
                    x - bubbleWidth / 2 + randomOffsetBig + (halfSpikeLength * loopCount * 2),
                    y - bubbleHeight - distance - randomOffsetBig,
                    false
                );
    
                // Bottom
                draw_triangle
                (
                    x - bubbleWidth / 2 + randomOffsetBig - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    y - distance,
                    x - bubbleWidth / 2 + randomOffsetBig + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    y - distance,
                    x - bubbleWidth / 2 + randomOffsetBig + (halfSpikeLength * loopCount * 2),
                    y - distance + randomOffsetBig,
                    false
                );
            }
        }
        else
        {
            if (loopAmount == 1)
            {
                // Top
                draw_triangle
                (
                    x,
                    y,
                    x + bubbleWidth,
                    y,
                    x + bubbleWidth / 2,
                    y - randomOffsetBig,
                    false
                );
                
                // Bottom
                draw_triangle
                (
                    x,
                    y + bubbleHeight,
                    x + bubbleWidth,
                    y + bubbleHeight,
                    x + bubbleWidth / 2,
                    y + bubbleHeight + randomOffsetBig,
                    false
                );
            }
            else
            {
                // Top
                draw_triangle
                (
                    x + randomOffsetBig - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    y,
                    x + randomOffsetBig + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    y,
                    x + randomOffsetBig + (halfSpikeLength * loopCount * 2),
                    y - randomOffsetBig,
                    false
                );
                
                // Bottom
                draw_triangle
                (
                    x + randomOffsetBig - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    y + bubbleHeight,
                    x + randomOffsetBig + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    y + bubbleHeight,
                    x + randomOffsetBig + (halfSpikeLength * loopCount * 2),
                    y + bubbleHeight + randomOffsetBig,
                    false
                );
            }
        }
    }
    
    // Left and Right
    loopAmount = floor((bubbleHeight - (randomOffsetBig * 2)) / (fontSize * 2)) + 1;
    halfSpikeLength = floor(((bubbleHeight - (randomOffsetBig * 2)) / loopAmount) / 2)
    for (var loopCount = 0; loopCount &lt;= loopAmount; loopCount++)
    {
        if (loopAmount == 1) {
            loopCount++;
        }
        if (actor != "")
        {
            if (loopAmount == 1) 
            {
                // Left
                draw_triangle
                (
                    x - bubbleWidth / 2,
                    y - bubbleHeight - distance,
                    x - bubbleWidth / 2,
                    y - distance,
                    x - bubbleWidth / 2 - randomOffsetBig,
                    y - bubbleHeight / 2 - distance,
                    false
                );
                
                // Right
                draw_triangle
                (
                    x + bubbleWidth / 2,
                    y - bubbleHeight - distance,
                    x + bubbleWidth / 2,
                    y - distance,
                    x + bubbleWidth / 2 + randomOffsetBig,
                    y - bubbleHeight / 2 - distance,
                    false
                );
            }
            else
            {
                // Left
                draw_triangle
                (
                    x - bubbleWidth / 2,
                    y - bubbleHeight - distance + randomOffsetBig + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    x - bubbleWidth / 2,
                    y - bubbleHeight - distance + randomOffsetBig - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    x - bubbleWidth / 2 - randomOffsetBig,
                    y - bubbleHeight - distance + randomOffsetBig + (halfSpikeLength * loopCount * 2),
                    false
                );
                
                // Right
                draw_triangle
                (
                    x + bubbleWidth / 2,
                    y - bubbleHeight - distance + randomOffsetBig + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    x + bubbleWidth / 2,
                    y - bubbleHeight - distance + randomOffsetBig - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    x + bubbleWidth / 2 + randomOffsetBig,
                    y - bubbleHeight - distance + randomOffsetBig + (halfSpikeLength * loopCount * 2),
                    false
                );
            }
        }
        else
        {
            if (loopAmount == 1) 
            {
                // Left
                draw_triangle
                (
                    x,
                    y,
                    x,
                    y + bubbleHeight,
                    x - randomOffsetBig,
                    y + bubbleHeight / 2,
                    false
                );
                
                // Right
                draw_triangle
                (
                    x + bubbleWidth,
                    y,
                    x + bubbleWidth,
                    y + bubbleHeight,
                    x + bubbleWidth + randomOffsetBig,
                    y + bubbleHeight / 2,
                    false
                );
            }
            else
            {
                // Left
                draw_triangle
                (
                    x,
                    y + randomOffsetBig + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    x,
                    y + randomOffsetBig - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    x - randomOffsetBig,
                    y + randomOffsetBig + (halfSpikeLength * loopCount * 2),
                    false
                );
                
                // Right
                draw_triangle
                (
                    x + bubbleWidth,
                    y + randomOffsetBig + halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    x + bubbleWidth,
                    y + randomOffsetBig - halfSpikeLength + (halfSpikeLength * loopCount * 2),
                    x + bubbleWidth + randomOffsetBig,
                    y + randomOffsetBig + (halfSpikeLength * loopCount * 2),
                    false
                );
            }
        }
    } 
    
    //triangle
    if (actor != "") 
    {
        // We add "+1" here to make sure it's just outside the actual bubble
        draw_triangle
        (
            x - randomOffsetBig, 
            y - distance + 1, 
            x + randomOffsetBig,
            y - distance + 1,
            actor.x,
            actor.y - actor.sprite_yoffset,
            false
        );
    }
    
    //text
    draw_set_font(font);
    draw_set_color(color);
    if (actor != "") 
    {
        draw_text_ext
        (
            x + fontSize - (bubbleWidth / 2),
            y + (fontSize / 1.8) - bubbleHeight - distance, 
            charactersToDraw, 
            fontSize * 1.3, 
            bubbleMaxLength
        );
    }
    else
    {
        draw_text_ext
        (
            x + fontSize,
            y + (fontSize / 1.8), 
            charactersToDraw, 
            fontSize * 1.3, 
            bubbleMaxLength
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw dialogbubble type 2

if (loadComplete &amp;&amp; type == 2)
{
    var distance = actor.sprite_yoffset + characterDistance;
    
    draw_set_color(c_black);
    if (actor != "") 
    {
        draw_rectangle
        (
            x - bubbleWidth / 2, 
            y - bubbleHeight - distance, 
            x + bubbleWidth / 2, 
            y - distance,
            false
        );
    }
    else
    {
        draw_rectangle
        (
            x, 
            y, 
            x + bubbleWidth, 
            y + bubbleHeight,
            false
        );
    }
    
    //type 1 cosmetic loop
    
    if (actor != "")
    {
        // Top left corner
        draw_circle
        (
            x - bubbleWidth / 2 + (randomOffsetBig / 2),
            y - bubbleHeight - distance + (randomOffsetBig / 2),
            randomOffsetBig,
            false
        );
        
        // Top right corner
        draw_circle
        (
            x + bubbleWidth / 2 - (randomOffsetBig / 2),
            y - bubbleHeight - distance + (randomOffsetBig / 2),
            randomOffsetBig,
            false
        );
        
        // Bottom right corner
        draw_circle
        (
            x + bubbleWidth / 2 - (randomOffsetBig / 2),
            y - distance - (randomOffsetBig / 2),
            randomOffsetBig,
            false
        );
        
        // Bottom left corner
        draw_circle
        (
            x - (bubbleWidth / 2) + (randomOffsetBig / 2),
            y - distance - (randomOffsetBig / 2),
            randomOffsetBig,
            false
        );
    }
    else
    {
        // Top left corner
        draw_circle
        (
            x + randomOffsetBig / 2,
            y + randomOffsetBig / 2,
            randomOffsetBig,
            false
        );
        
        // Top right corner
        draw_circle
        (
            x + bubbleWidth - randomOffsetBig / 2,
            y + randomOffsetBig / 2,
            randomOffsetBig,
            false
        );
        
        // Bottom right corner
        draw_circle
        (
            x + bubbleWidth - randomOffsetBig / 2,
            y + bubbleHeight - randomOffsetBig / 2,
            randomOffsetBig,
            false
        );
        
        // Bottom left corner
        draw_circle
        (
            x + randomOffsetBig / 2,
            y + bubbleHeight - randomOffsetBig / 2,
            randomOffsetBig,
            false
        );
    }
    
    // Top and bottom
    var loopAmount = floor((bubbleWidth - randomOffsetBig) / (fontSize * 2)) + 1;
    var distanceBetweenEllipses = floor(((bubbleWidth - randomOffsetBig / 2) / loopAmount) / 2);
    for (var loopCount = 0; loopCount &lt; loopAmount; loopCount++)
    {    
        if(actor != "")
        {
            if (loopAmount == 1) {
                // Top
                draw_ellipse
                (
                    x - bubbleWidth / 2 + randomOffsetBig - distanceBetweenEllipses,
                    y - bubbleHeight - distance - (randomOffsetBig / 2),
                    x - bubbleWidth / 2 + randomOffsetBig + floor(distanceBetweenEllipses * 1.5),
                    y - bubbleHeight - distance + (randomOffsetBig / 2),
                    false
                );
    
                // Bottom
                draw_ellipse
                (
                    x - bubbleWidth / 2 + randomOffsetBig - distanceBetweenEllipses,
                    y - distance + (randomOffsetBig / 2),
                    x - bubbleWidth / 2 + randomOffsetBig + floor(distanceBetweenEllipses * 1.5),
                    y - distance - (randomOffsetBig / 2),
                    false
                );
            }
            else
            {
                // Top
                draw_ellipse
                (
                    x - bubbleWidth / 2 + randomOffsetBig - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    y - bubbleHeight - distance - (randomOffsetBig / 2),
                    x - bubbleWidth / 2 + randomOffsetBig + floor(distanceBetweenEllipses * 1.5) + (distanceBetweenEllipses * loopCount * 2),
                    y - bubbleHeight - distance + (randomOffsetBig / 2),
                    false
                );
                
                // Bottom
                draw_ellipse
                (
                    x - bubbleWidth / 2 + randomOffsetBig - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    y - distance + (randomOffsetBig / 2),
                    x - bubbleWidth / 2 + randomOffsetBig + floor(distanceBetweenEllipses * 1.5) + (distanceBetweenEllipses * loopCount * 2),
                    y - distance - (randomOffsetBig / 2),
                    false
                );
            }
        }
        else
        {
            if (loopAmount == 1)
            {
                // Top
                draw_ellipse
                (
                    x,
                    y - (randomOffsetBig / 2),
                    x + bubbleWidth,
                    y + (randomOffsetBig / 2),
                    false
                );
                
                // Bottom
                draw_ellipse
                (
                    x,
                    y + bubbleHeight - (randomOffsetBig / 2),
                    x + bubbleWidth,
                    y + bubbleHeight + (randomOffsetBig / 2),
                    false
                );
            }
            else
            {
                // Top
                draw_ellipse
                (
                    x + randomOffsetBig - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    y - (randomOffsetBig / 2),
                    x + randomOffsetBig + floor(distanceBetweenEllipses * 1.5) + (distanceBetweenEllipses * loopCount * 2),
                    y + (randomOffsetBig / 2),
                    false
                );
                
                // Bottom
                draw_ellipse
                (
                    x + randomOffsetBig - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    y + bubbleHeight - (randomOffsetBig / 2),
                    x + randomOffsetBig + floor(distanceBetweenEllipses * 1.5) + (distanceBetweenEllipses * loopCount * 2),
                    y + bubbleHeight + (randomOffsetBig / 2),
                    false
                );
            }
        }
    }
    
    // Left and Right
    loopAmount = floor((bubbleHeight - randomOffsetBig) / (fontSize * 2)) + 1;
    distanceBetweenEllipses = floor(((bubbleHeight - randomOffsetBig / 2) / loopAmount) / 2);
    for (var loopCount = 0; loopCount &lt;= loopAmount; loopCount++)
    {
        if (actor != "")
        {
            if (loopAmount == 1) 
            {
                /*
                // Left
                draw_circle
                (
                    x - bubbleWidth / 2,
                    y - bubbleHeight - distance,
                    randomOffsetSmall,
                    false
                );
                
                // Right
                draw_circle
                (
                    x + bubbleWidth / 2,
                    y - bubbleHeight - distance,
                    randomOffsetSmall,
                    false
                );
                */
            }
            else
            {
                // Left
                draw_ellipse
                (
                    x - bubbleWidth / 2 - (randomOffsetBig / 2),
                    y - bubbleHeight - distance - distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    x - bubbleWidth / 2 + (randomOffsetBig / 2),
                    y - bubbleHeight - distance + distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    false
                );
                
                // Right
                draw_circle
                (
                    x + bubbleWidth / 2,
                    y - bubbleHeight - distance + randomOffsetBig + distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    randomOffsetSmall,
                    false
                );
            }
        }
        else
        {
            if (loopAmount == 1) 
            {
                // Left
                draw_circle
                (
                    x,
                    y,
                    randomOffsetSmall,
                    false
                );
                
                // Right
                draw_circle
                (
                    x + bubbleWidth,
                    y,
                    randomOffsetSmall,
                    false
                );
            }
            else
            {
                // Left
                draw_circle
                (
                    x,
                    y + randomOffsetBig + distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    randomOffsetSmall,
                    false
                );
                
                // Right
                draw_circle
                (
                    x + bubbleWidth,
                    y + randomOffsetBig + distanceBetweenEllipses + (distanceBetweenEllipses * loopCount * 2),
                    randomOffsetSmall,
                    false
                );
            }
        }
    }
    
    //triangle
    if (actor != "") 
    {
        // We add "+1" here to make sure it's just outside the actual bubble
        draw_circle
        (
            x - randomOffsetBig, 
            y - distance + 1, 
            randomOffsetSmall,
            false
        );
    }
    
    //text
    draw_set_font(font);
    draw_set_color(color);
    if (actor != "") 
    {
        draw_text_ext
        (
            x + fontSize - (bubbleWidth / 2),
            y + (fontSize / 1.8) - bubbleHeight - distance, 
            charactersToDraw, 
            fontSize * 1.3, 
            bubbleMaxLength
        );
    }
    else
    {
        draw_text_ext
        (
            x + fontSize,
            y + (fontSize / 1.8), 
            charactersToDraw, 
            fontSize * 1.3, 
            bubbleMaxLength
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Advance dialog
if (write &amp;&amp; closeable)
{
    charactersToDraw = previousCharactersDrawn + dialog;
    charactersDrawn = dialogLength;
}
else if (newDialog &amp;&amp; endOfDialog &amp;&amp; !write &amp;&amp; closeable)
{
    previousCharactersDrawn = "";
    charactersToDraw = "";
    endOfDialog = false;
    write = true;
}
else if (endOfDialog &amp;&amp; !write &amp;&amp; closeable)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
